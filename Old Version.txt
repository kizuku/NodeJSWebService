
//app.use(bodyParser.json());
/*



          if (!verifySigCertURL(req.headers.signaturecertchainurl)) {
                res.send('Error: invalid signature certificate url');
            } else {

                

                console.log("Reached config")
                const config = {
                    user: process.env.user,
                    password: process.env.password,
                    server: process.env.server,
                    database: process.env.database
                };

                const pool = new sql.ConnectionPool(config, err => {
                    if (err) console.log(err);

                    console.log("Pool request reached \n")
                    pool.request().query('select * from ##TempTable', function (err, recordset) {
                        if (err) console.log(err)
                        var statusCode, message, shouldEnd, titleText, contentText, instructions
                        statusCode = 200;
                        shouldEnd = false;
                        instructions = "Welcome to <skill name>. You can fetch information with the following commands: get records, get records in AREA, get critical records. " +
                            "For more information, say help."

                        // set response parameters
                        res.setHeader('Content-Type', 'application/json');
                        if (req.body.request.type === 'LaunchRequest') {
                            message = instructions
                            titleText = "Skill Launch"
                            contentText = "Launch the skill for use by saying 'Alexa, launch <skill name>.'"
                        } else if (req.body.request.type === 'SessionEndedRequest') {
                            // Don't send any response
                        } else {
                            switch (req.body.request.intent.name) {
                                case 'GetRecordIntent':
                                    message = "Test: Get Record"
                                    titleText = "Get Record"
                                    contentText = "Test"
                                    break;
                                case 'AMAZON.HelpIntent':
                                    message = "To get general records, say 'Get records'. To get records from a specific area, say 'Get records in AREA', substituting in the specific area. " +
                                        "To get records with critical status, say 'Get critical records'. To exit, say 'Stop'. To cancel operation without exiting, say 'Cancel'."
                                    titleText = "Skill Help Information"
                                    contentText = message
                                    break;
                                case 'AMAZON.StopIntent':
                                    shouldEnd = true;
                                    message = "Skill stopped. Shutting down."
                                    titleText = "Skill Operation Stopped"
                                    contentText = "Skill operation stopped. Please relaunch to continue."
                                    break;
                                case 'AMAZON.CancelIntent':
                                    message = "Skill operation cancelled. Please say another command to continue or 'stop' to exit."
                                    titleText = "Skill Operation Cancelled"
                                    contentText = message
                                    break;
                                case 'AMAZON.FallbackIntent':
                                    message = "I'm not sure I understand. Please say a valid command or repeat yourself."
                                    titleText = "Skill Fallback"
                                    contentText = "Unknown command. Please say a valid command or repeat if valid."
                                    break;
                                default:
                                    statusCode = 500;
                                    shouldEnd = true;
                                    break;
                            }
                        }
                        // send response
                        res.status(statusCode).json({
                            version: "1.0",
                            response: {
                                outputSpeech: {
                                    type: "SSML",
                                    ssml: "<speak>" + message + "</speak>"
                                },
                                card: {
                                    type: "Simple",
                                    title: titleText,
                                    content: contentText
                                },
                                reprompt: {
                                    outputSpeech: {
                                        type: "SSML",
                                        ssml: "<speak>" + message + "</speak>"
                                    }
                                },
                                shouldEndSession: shouldEnd
                            }
                        });
                    });
                });

                pool.on('error', err => {
                    console.log(err)
                });

            });





var server = app.listen(port, function() {
    console.log('Server is running on port ' + port);
});

function convertMilitaryTimeToStandard(time) {
    time = time.split(':');

    var hours = Number(time[0]);
    var minutes = Number(time[1]);
    var seconds = Number(time[2]);

    var timeValue;

    if (hours > 0 && hours <= 12) {
        timeValue = "" + hours;
    } else if (hours > 12) {
        timeValue = "" + (hours - 12);
    } else if (hours == 0) {
        timeValue = "12";
    }

    timeValue += (minutes < 10) ? ":0" + minutes : ":" + minutes;
    timeValue += (seconds < 10) ? ":0" + seconds : ":" + seconds;
    timeValue += (hours >= 12) ? " P.M." : " A.M.";

    return timeValue;
}

